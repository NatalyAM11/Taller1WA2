{"version":3,"sources":["components/Link/Link.tsx","components/Character/Character.tsx","components/CharacterForm/CharacterForm.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Link","text","url","active","className","activeClassName","to","Character","id","name","img","onDelete","onEdit","src","onClick","CharacterForm","editId","type","onCreate","history","useHistory","React","useState","formSubmitted","setFormSubmitted","setName","mainImg","setMainImg","nameValid","length","mainImgValid","onSubmit","event","preventDefault","console","log","push","onChange","target","value","App","formType","setFormType","setEditId","Math","random","process","CharactersElems","setCharacters","handleDelete","deleteId","characterElemCopy","filter","elem","handleBeginEdit","href","path","newCharacter","newArrayCharacter","editCharacter","characterCopy","slice","editIndex","findIndex","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAUaA,EAA4B,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAcC,GAAO,EAAfC,OAAe,EAAPD,KAEnD,OAAO,cAAC,IAAD,CACPE,UAAU,OACVC,gBAAgB,eAChBC,GAAIJ,EAHG,SAIND,KCHMM,G,MAAsC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAUxE,OAAQ,sBAAKR,UAAU,YAAf,UACF,oBAAIA,UAAU,gBAAd,SAA+BK,IAC/B,qBAAKL,UAAU,eAAeS,IAAKH,IACnC,wBAAQI,QAXmD,WAC3DH,EAASH,IAUT,oBACA,wBAAQM,QARiD,WACzDF,EAAOJ,IAOP,uB,OCbCO,G,MAA8C,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAAUN,EAAU,EAAVA,OAE5EO,EAASC,cAGf,EAAyCC,IAAMC,UAAS,GAAxD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,EAAwBH,IAAMC,SAAS,KAAvC,mBAAOb,EAAP,KAAagB,EAAb,KAKA,EAA8BJ,IAAMC,SAAS,KAA7C,mBAAOI,EAAP,KAAgBC,EAAhB,KAMMC,EAAWnB,EAAKoB,OAAO,EACvBC,EAAcJ,EAAQG,OAAO,GAmCnC,OAAO,uBAAMzB,UAAU,gBAAgB2B,SAjCsB,SAACC,GAC1DA,EAAMC,iBAENT,GAAiB,GAEP,WAAPP,GAAmBW,GAAaE,GAC/BI,QAAQC,IAAI,SAEZjB,EAAS,CACLT,KAAMA,EACNC,IAAKgB,IAITD,EAAQ,KACRE,EAAW,KAEXH,GAAiB,GAEjBL,EAAQiB,KAAK,oBAEA,SAAPnB,GAAiBW,EAEX,OAATZ,GACCJ,EAAOI,EAAQ,CAACP,KAAMA,IAI1ByB,QAAQC,IAAI,YAKb,UAIH,oBAAI/B,UAAU,YAAd,SAAkC,WAAPa,EAAiB,0BAA2B,uBAEvE,2CAEI,uBAAOA,KAAK,OAAOR,KAAK,OAAO4B,SAtD6B,SAACL,GACjEP,EAAQO,EAAMM,OAAOC,QAqD0CA,MAAO9B,IAChEc,IAAkBK,GAChB,mBAAGxB,UAAU,sBAAb,uDAKR,2CAEI,uBAAOa,KAAK,OAAOR,KAAK,UAAU4B,SA1D6B,SAACL,GACpEL,EAAWK,EAAMM,OAAOC,QAyD6CA,MAAOb,IACtEH,IAAkBO,GAChB,mBAAG1B,UAAU,sBAAb,4DAIR,2CAEI,0BAAUA,UAAU,kBAIxB,wCAEI,uBAAOa,KAAK,YAGhB,yCAEI,uBAAOA,KAAK,YAGhB,oDAEI,uBAAOA,KAAK,YAGhB,oBAAIb,UAAU,eAAd,mBAEA,0CAEI,uBAAOa,KAAK,YAGhB,6CAEI,uBAAOA,KAAK,YAGhB,0CAEI,uBAAOA,KAAK,YAGhB,wBAAQb,UAAU,SAAlB,SAAmC,WAAPa,EAAiB,QAAS,yBCsB/CuB,MAlIf,WAEE,MAA+BnB,IAAMC,SAA6B,UAAlE,mBAAOmB,EAAP,KAAiBC,EAAjB,KACA,EAA2BrB,IAAMC,SAAwB,MAAzD,mBAAON,EAAP,KAAe2B,EAAf,KAGA,EAAwCtB,IAAMC,SAA6B,CACzE,CACEd,GAAIoC,KAAKC,SACTpC,KAAM,QACNC,IAAI,GAAD,OAAKoC,cAAL,qBAJP,mBAAOC,EAAP,KAAwBC,EAAxB,KAyBMC,EAAa,SAACC,GAElB,IAAMC,EAAmBJ,EAAgBK,QAAO,SAACC,GAE/C,OAAGA,EAAK7C,IAAI0C,KAOdF,EAAcG,IAIVG,EAAkB,SAACtC,GACvB2B,EAAU3B,GACV0B,EAAY,QACZR,QAAQC,IAAI,gBAAiBnB,IAwB/B,OAEE,cAAC,IAAD,UACE,qBAAKZ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,MAAf,UACA,mBAAGmD,KAAK,2BAAR,SAAmC,qBAAK1C,IAAG,UAAKiC,cAAL,oBAA+C1C,UAAU,cAClG,cAAC,EAAD,CACMH,KAAK,aACLC,IAAI,oBAEV,cAAC,EAAD,CACMD,KAAK,QACLC,IAAI,WAEV,cAAC,EAAD,CACMD,KAAK,aACLC,IAAI,gBAET,cAAC,EAAD,CACKD,KAAK,OACLC,IAAI,UAEV,qBAAKW,IAAG,UAAKiC,cAAL,qBAAgD1C,UAAU,gBAGtE,cAAC,IAAD,CAAOoD,KAAK,QAAZ,SACE,cAAC,EAAD,CACAxC,OAAQA,EACRC,KAAMwB,EACNvB,SAxFW,SAACuC,GAClBvB,QAAQC,IAAI,UAAWsB,GAEvB,IAAMC,EAAkB,GAAD,mBAClBX,GADkB,CAErB,CACEvC,GAAIoC,KAAKC,SACTpC,KAAMgD,EAAahD,KACnBC,IAAK+C,EAAa/C,OAItBsC,EAAcU,IA6ER9C,OApDW,SAACJ,EAAYmD,GAC9BzB,QAAQC,IAAI3B,EAAImD,EAAclD,MAE9B,IAAMmD,EAAeb,EAAgBc,QAC/BC,EAAWf,EAAgBgB,WAAU,SAACV,GAC1C,OAAGA,EAAK7C,KAAOQ,KAMjB4C,EAAcE,GAAd,2BACKf,EAAgBe,IAChBH,GAGLX,EAAcY,QAwCV,cAAC,IAAD,CAAOJ,KAAK,kBAAZ,SACA,yBAASpD,UAAU,UAAnB,SACC2C,EAAgBiB,KAAK,SAACX,GACrB,OAAO,cAAC,EAAD,CAEP7C,GAAI6C,EAAK7C,GACTC,KAAM4C,EAAK5C,KACXC,IAAK2C,EAAK3C,IACVC,SAAUsC,EACVrC,OAAQ0C,GALHD,EAAK7C,mBCvHLyD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b88f9349.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Link.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ninterface LinkProps{\r\n    text:string,\r\n    active?:boolean,\r\n    url:string\r\n}\r\n\r\nexport const Link: React.FC<LinkProps> = ({text, active, url})=>{\r\n\r\n      return <NavLink \r\n      className=\"Link\"\r\n      activeClassName=\"Link--active\" \r\n      to={url}>\r\n      {text}\r\n      </NavLink>;\r\n\r\n}","import React from 'react';\r\nimport './Character.css';\r\n\r\n\r\nexport interface CharacterProps{\r\n      id: number,\r\n    name:string,\r\n    img:string,\r\n    onDelete: (id:number)=>void\r\n    onEdit: (id:number)=>void\r\n}\r\n\r\n\r\nexport const Character: React.FC<CharacterProps> = ({id, name, img, onDelete, onEdit})=>{\r\n\r\n      const handleDelete: React.MouseEventHandler<HTMLButtonElement> = ()=>{\r\n            onDelete(id);\r\n      }\r\n\r\n      const handleEdit: React.MouseEventHandler<HTMLButtonElement> = ()=>{\r\n            onEdit(id);\r\n      }\r\n    \r\n      return (<div className=\"character\">\r\n            <h2 className=\"characterName\">{name}</h2>\r\n            <img className=\"characterImg\" src={img}></img>\r\n            <button onClick={handleDelete}>DELETE</button>\r\n            <button onClick={handleEdit}>EDIT</button>\r\n      </div>);\r\n\r\n}\r\n\r\nexport default Character;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport {CharacterProps} from \"../Character/Character\"\r\nimport './CharacterForm.css';\r\n\r\n//evento cuando se crea el personaje\r\ninterface CharacterFormProps{\r\n    //onCreate: (newCharacter: CharacterProps)=>void;\r\n    editId: number | null;\r\n    type: \"create\" | \"edit\";\r\n    onCreate: (newCharacter: {name:string, img:string})=>void;\r\n    onEdit: (id:number, editCharacter:{name:string})=>void;\r\n}\r\n\r\nexport const CharacterForm: React.FC<CharacterFormProps> = ({ editId, type, onCreate, onEdit})=>{\r\n\r\n    const history= useHistory();\r\n\r\n    \r\n    const [formSubmitted, setFormSubmitted] =React.useState(false);\r\n\r\n    const [name, setName] = React.useState(' ');\r\n    const handleNameChange: React.ChangeEventHandler<HTMLInputElement> =(event)=>{\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const [mainImg, setMainImg ]= React.useState(' ');\r\n    const handleMainImgChange: React.ChangeEventHandler<HTMLInputElement> =(event)=>{\r\n        setMainImg(event.target.value)\r\n    }\r\n\r\n\r\n    const nameValid= name.length>1;\r\n    const mainImgValid= mainImg.length>10;\r\n    \r\n    const handleSubmit: React.FormEventHandler<HTMLFormElement> =(event)=>{\r\n        event.preventDefault();\r\n\r\n        setFormSubmitted(true);\r\n\r\n        if(type===\"create\" && nameValid && mainImgValid){\r\n            console.log('valid')\r\n\r\n            onCreate({\r\n                name: name,\r\n                img: mainImg\r\n            })\r\n\r\n            //vacio los inputs\r\n            setName(\" \");\r\n            setMainImg(\" \");\r\n            //tambien el form vuelve a su estado inicial\r\n            setFormSubmitted(false);\r\n\r\n            history.push('/personajesList')\r\n\r\n        } else if(type===\"edit\" && nameValid){\r\n\r\n            if(editId!==null){\r\n                onEdit(editId, {name: name})\r\n            }\r\n\r\n        } else{\r\n            console.log('invalid')\r\n        }\r\n    }\r\n\r\n    \r\n    return <form className=\"characterForm\" onSubmit={handleSubmit}>\r\n\r\n\r\n\r\n        <h3 className=\"titleForm\">{type===\"create\"? \"CREA UN PERSONAJE NUEVO\": \"EDITA EL PERSONAJE\"}</h3>\r\n\r\n        <label>\r\n            Nombre\r\n            <input type=\"text\" name=\"name\" onChange={handleNameChange} value={name}></input>\r\n            {(formSubmitted && !nameValid) &&\r\n                <p className=\"CharacterForm_error\">Debes escribir el nombre del personaje</p>\r\n            }\r\n            \r\n        </label>\r\n\r\n        <label>\r\n            Imagen\r\n            <input type=\"text\" name=\"MainImg\" onChange={handleMainImgChange} value={mainImg}></input>\r\n            {(formSubmitted && !mainImgValid) &&\r\n                <p className=\"CharacterForm_error\">Debes escribir el URL completo de la imagen</p>\r\n            }\r\n        </label>\r\n\r\n        <label>\r\n            Perfil\r\n            <textarea className=\"largeInput\"></textarea>\r\n        </label>\r\n        \r\n\r\n        <label>\r\n            Rol\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <label>\r\n            Arma\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <label>\r\n            Constelación\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <h4 className=\"subtitleForm\">Stats</h4>\r\n\r\n        <label>\r\n            Arena\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <label>\r\n            Cáliz\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <label>\r\n            Tiara\r\n            <input type=\"text\"></input>\r\n        </label>\r\n\r\n        <button className=\"button\">{type===\"create\"? \"CREAR\": \"GUARDAR CAMBIOS\"}</button>\r\n    </form>;\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport {Link} from '../Link/Link'\nimport {MainTitle} from '../mainTitle/MainTitle'\nimport {ElementTitle} from '../ElementTitle/ElementTitle'\nimport {Character, CharacterProps} from '../Character/Character'\nimport { CharacterForm } from '../CharacterForm/CharacterForm';\nimport { HashRouter, Route} from 'react-router-dom';\n\n\n/*type CharacterElemObj= CharacterProps &{\n  id: number;\n}*/\n\n\ntype CharacterElemObj = {\n  name:string,\n  img: string,\n  id: number;\n}\n\nfunction App() {\n\n  const [formType, setFormType]= React.useState<'create' | 'edit'> ('create');\n  const [editId, setEditId]= React.useState<number | null>(null);\n\n  //Estado del arreglo de personajes\n  const [CharactersElems, setCharacters]= React.useState<CharacterElemObj[]>([\n    {\n      id: Math.random(),\n      name: \"DILUC\",\n      img: `${process.env.PUBLIC_URL}/img/diluc.png`,\n    },\n  ])\n\n  //const handleCreate=(newCharacter: CharacterProps)=>{\n  const handleCreate=(newCharacter: {name:string, img:string})=>{\n    console.log('Se creo', newCharacter)\n\n    const newArrayCharacter=[\n      ...CharactersElems,\n      {\n        id: Math.random(),\n        name: newCharacter.name,\n        img: newCharacter.img\n      }\n    ]\n\n    setCharacters(newArrayCharacter);\n  }\n\n\n  const handleDelete=(deleteId: number)=>{\n\n    const characterElemCopy= CharactersElems.filter((elem)=>{\n\n      if(elem.id==deleteId){\n        return false\n      }else{\n        return true\n      }\n    });\n\n    setCharacters(characterElemCopy);\n  }\n\n\n  const handleBeginEdit = (editId: number) =>{\n    setEditId(editId);\n    setFormType(\"edit\");\n    console.log('estas en edit', editId)\n  }\n\n  const handleEdit = (id: number, editCharacter:{name: string})=>{\n    console.log(id, editCharacter.name)\n\n    const characterCopy= CharactersElems.slice();\n    const editIndex= CharactersElems.findIndex((elem)=>{\n      if(elem.id === editId){\n        return true;\n      }\n      return false\n    });\n\n    characterCopy[editIndex] = {\n      ...CharactersElems[editIndex],\n      ...editCharacter,\n    }\n\n    setCharacters(characterCopy);\n  }\n\n  \n  \n  return (\n\n    <HashRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"nav\">\n          <a href=\"https://www.youtube.com/\"><img src={`${process.env.PUBLIC_URL}/img/navLogo.png`} className=\"navLogo\"></img></a>\n            <Link\n                  text=\"PERSONAJES\"\n                  url=\"/personajesList\"\n              />\n            <Link\n                  text=\"ARMAS\"\n                  url=\"/armas\"\n              />\n            <Link\n                  text=\"ARTEFACTOS\"\n                  url=\"/artefactos\"\n            />\n             <Link\n                  text=\"FORM\"\n                  url=\"/form\"\n            />\n            <img src={`${process.env.PUBLIC_URL}/img/userIcon.png`} className=\"userIcon\"></img>\n          </nav>\n\n        <Route path=\"/form\">\n          <CharacterForm \n          editId={editId}\n          type={formType}\n          onCreate={handleCreate}\n          onEdit={handleEdit}\n          />  \n        </Route>\n\n        <Route path=\"/personajesList\">\n        <article className=\"content\">\n        {CharactersElems.map ((elem) =>{\n          return <Character \n          key={elem.id}\n          id={elem.id} \n          name={elem.name} \n          img={elem.img}\n          onDelete={handleDelete}\n          onEdit={handleBeginEdit}\n          />\n        })} \n        </article>\n        </Route>\n        \n          \n        </header>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}